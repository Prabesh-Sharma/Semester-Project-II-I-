import pool from "../database/config.js";
import bcrypt from "bcrypt";
import generateToken from "../utils/jwtGenerator.js";

class UserController {
  async register(req, res) {
    const { email, citizenNo, password } = req.body;

    //checking if the fields are empty
    if (!email || !citizenNo || !password) {
      return res.status(400).json({
        error: "give all info lil nigga",
      });
    }

      const user = await pool.query(
        "SELECT * FROM citizen WHERE _email = $1 OR _number = $2",
        [email, citizenNo],
      );

      //check if the user is already registered
      if (user.rows.length > 0) {
        return res.status(409).json({
          error: "you already in lil nigga",
        });
      }

      const hashedpassword = await bcrypt.hash(password, 10); //lol get hashed 2^10 times

      const newUser = await pool.query(
        "INSERT INTO citizen(_email,_password,_number) VALUES($1,$2,$3) RETURNING *",
        [email, hashedpassword, citizenNo],
      );

      res.status(201).json({
        message: "user registered",
        data: newUser.rows[0],
      });
  }

  async login(req, res) {
    const { citizenNo, password } = req.body;
    if (!citizenNo || !password) {
      return res.status(400).json({
        error: "enter both infos lil nigga",
      });
    }

      const user = await pool.query(
        "SELECT * FROM citizen WHERE _number = $1",
        [citizenNo],
      );

      if (user.rows.length === 0) {
        return res.status(400).json({
          error: "wrong citizenship number lil nigga !!!",
        });
      }

      const isVerified = await bcrypt.compare(password, user.rows[0]._password);
      //compare the user entered password with the hashed password in citizen table and return a boolean value

      if (!isVerified) {
        return res.status(400).json({
          error: "invalid password lil bro !!!",
        });
      }

      const token = generateToken(user.rows[0]._id);//token generated by using the generator from /utils/jwtGenerator returns
                                                    //a JWT with userID
      console.log(token);

      res.status(200).json({
        message: "you are in G",
      });
  }
}

const userController = new UserController();
export default userController;
//create and export a object for this class